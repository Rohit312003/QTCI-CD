name: Build, Upload, Download, and Push Executable

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Install Qt and build tools
      - name: Install Qt and build tools
        run: |
          sudo apt-get update
          sudo apt-get install -y qt5-qmake qtbase5-dev build-essential

      # Step 3: Create build directory
      - name: Create build directory
        run: mkdir -p build

      # Step 4: Generate Makefile with qmake
      - name: Generate Makefile with qmake
        run: qmake project.pro -o build/Makefile  # Adjust path if necessary

      # Step 5: Build the project
      - name: Build the project
        run: make -C build

      # Step 6: List files in the build directory to verify if `atul.exe` exists
      - name: List files in build directory
        run: ls -la ./build  # This will show the files in the build directory

      # Step 7: Upload the built executable as an artifact
      - name: Upload executable
        uses: actions/upload-artifact@v4
        with:
          name: executable  # Artifact name
          path: ./build/atul.exe  # Adjust path based on your build output (make sure the executable is in `build/atul.exe`)
          if-no-files-found: error  # Fail if no files are found at the specified path
          compression-level: 6  # Optional: controls compression level for artifact
          overwrite: false  # Prevent overwriting existing artifacts
          include-hidden-files: false  # Avoid uploading hidden files

  download:
    needs: build  # Ensure this job waits for the `build` job to complete
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository (including the release folder)
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Ensure the release folder exists and is up-to-date
      - name: Ensure Release Folder
        run: |
          mkdir -p release
          echo "Release folder is ready."

      # Step 3: Download the uploaded artifact
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: executable  # Artifact name
          path: ./release    # Directory where the artifact will be downloaded

      # Step 4: List files in the release directory to verify download
      - name: List Files
        run: ls -R ./release

      # Step 5: Push Executable to Repository
      - name: Push Executable to Repository
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Configuring git user for commit
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          # Add and commit the downloaded .exe file
          git add ./release/atul.exe  # Correct path to the downloaded .exe file
          git commit -m "Add compiled executable [skip ci]"

          # Push the changes back to the repository
          git push
