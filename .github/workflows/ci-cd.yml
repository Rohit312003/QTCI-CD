name: Build and Upload Executable

on:
  push:
    tags:
      - 'v*.*'  # Trigger on new tags like v1.0, v1.1, etc.
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Install Qt and build tools
      - name: Install Qt and build tools
        run: |
          sudo apt-get update
          sudo apt-get install -y qt5-qmake qtbase5-dev build-essential

      # Step 3: Create build directory
      - name: Create build directory
        run: mkdir -p build

      # Step 4: Generate Makefile with qmake
      - name: Generate Makefile with qmake
        run: qmake project.pro -o build/Makefile  # Adjust path if necessary

      # Step 5: Build the project
      - name: Build the project
        run: make -C build

      # Step 6: List files in the build directory to confirm the executable
      - name: List files in the build directory
        run: ls -la ./build

      # Step 7: Upload the built executable as an artifact
      - name: Upload executable
        uses: actions/upload-artifact@v4
        with:
          name: executable
          path: ./build/atul  # Adjust path if necessary
          if-no-files-found: error  # Fail if the executable is missing

  release:
    needs: build  # Ensure this job waits for the `build` job to complete
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Download the build artifact
      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: executable  # Ensure this matches the uploaded artifact name in `build` job
          path: ./release  # Download the executable into the release directory

      # Step 3: Verify the downloaded artifact
      - name: List files in the release directory to verify download
        run: ls -la ./release

      # Step 4: Create GitHub Release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: "Release ${{ github.ref_name }}"
          body: "Automated release for version ${{ github.ref_name }}"
          draft: false
          prerelease: false

      # Step 5: Upload the executable to the release
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/atul  # Path to the executable
          asset_name: atul
          asset_content_type: application/octet-stream
